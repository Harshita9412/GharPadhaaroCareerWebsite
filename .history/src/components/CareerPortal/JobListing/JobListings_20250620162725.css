import React, { useState, useEffect } from 'react';

const JobListings = ({ searchQuery, filters, category }) => {
  const mockJobs = [ /* your mock jobs as before */ ];

  const [filteredJobs, setFilteredJobs] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const jobsPerPage = 5;

  useEffect(() => {
    let filtered = [...mockJobs];

    if (category) {
      filtered = filtered.filter(
        job => job.category && job.category.toLowerCase() === category.toLowerCase()
      );
    }

    if (searchQuery) {
      filtered = filtered.filter(
        job =>
          job.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
          job.description.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (filters.location) {
      filtered = filtered.filter(job => job.location === filters.location);
    }

    if (filters.team) {
      filtered = filtered.filter(job => job.team === filters.team);
    }

    if (filters.jobType) {
      filtered = filtered.filter(job => job.jobType === filters.jobType);
    }

    if (filters.experience) {
      filtered = filtered.filter(job => job.experience === filters.experience);
    }

    setFilteredJobs(filtered);
    setCurrentPage(1);
  }, [searchQuery, filters, category]);

  const indexOfLastJob = currentPage * jobsPerPage;
  const indexOfFirstJob = indexOfLastJob - jobsPerPage;
  const currentJobs = filteredJobs.slice(indexOfFirstJob, indexOfLastJob);
  const totalPages = Math.ceil(filteredJobs.length / jobsPerPage);

  return (
    <div className="job-listings">
      <h3>{filteredJobs.length} job(s) found</h3>

      {currentJobs.length > 0 ? (
        currentJobs.map(job => (
          <div key={job.id} className="job-card">
            <div className="job-card-header">
              <h4 className="job-title">{job.title}</h4>
              <div className="job-type">{job.jobType}</div>
            </div>
            <div className="job-details">
              <div className="job-detail"><strong>Team:</strong> {job.team}</div>
              <div className="job-detail"><strong>Location:</strong> {job.location}</div>
              <div className="job-detail"><strong>Experience:</strong> {job.experience}</div>
            </div>
            <p className="job-description">{job.description}</p>
            <div className="job-card-footer">
              <small>Posted on {formatDate(job.datePosted)}</small>
            </div>
          </div>
        ))
      ) : (
        <div className="no-jobs-found">
          <h3>No jobs match your filters.</h3>
          <p>Please try changing your search or filter options.</p>
        </div>
      )}

      {totalPages > 1 && (
        <div className="pagination">
          <button
            className="pagination-btn"
            onClick={() => setCurrentPage(prev => prev - 1)}
            disabled={currentPage === 1}
          >
            Prev
          </button>

          {Array.from({ length: totalPages }, (_, i) => (
            <button
              key={i}
              className={`pagination-btn ${currentPage === i + 1 ? 'active' : ''}`}
              onClick={() => setCurrentPage(i + 1)}
            >
              {i + 1}
            </button>
          ))}

          <button
            className="pagination-btn"
            onClick={() => setCurrentPage(prev => prev + 1)}
            disabled={currentPage === totalPages}
          >
            Next
          </button>
        </div>
      )}
    </div>
  );
};

const formatDate = (dateString) => {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
};

export default JobListings;
